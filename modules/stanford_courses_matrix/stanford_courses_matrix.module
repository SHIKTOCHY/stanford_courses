<?php
/**
 * @file
 * Code for the Stanford Courses Matrix feature.
 */

include_once 'stanford_courses_matrix.features.inc';


/**
 * Implements hook_preprocess_views_view_matrix().
 *
 * Alter the sorting of the course views matrix so that the course code is
 * sorted natually.
 */
function stanford_courses_matrix_preprocess_views_view_matrix(&$vars) {

  // Get all of the course codes so we can naturally sort them.
  $course_codes = array_map("stanford_courses_matrix_get_results_course_code", $vars['result']);

  // Natural sort them.
  natsort($course_codes);

  // The keys are the row index for the view. We can arrange the rows with this
  // index.
  $result_order = array_keys($course_codes);

  // Re-arrange the views-rows with the new index keys.
  $rows = array();
  foreach ($result_order as $index_key) {

    // If the row is not available stop.
    // @todo: find out why.
    if (!isset($vars['rows'][$index_key])) {
      continue;
    }

    // Key it up.
    $rows[] = $vars['rows'][$index_key];
  }

  // Apply the new order.
  $vars['rows'] = $rows;

  // Re-key the 'even/odd' classes in the results output.
  $zebra = "even";
  foreach ($vars['rows'] as $row_key => $row) {
    foreach ($row as $data_key => $data) {
      // Pop the last class as it should be the odd/even.
      $zebra = ($zebra == "even") ? "odd" : "even";
      array_pop($vars['rows'][$row_key][$data_key]['attributes']['class']);
      $vars['rows'][$row_key][$data_key]['attributes']['class'][] = $zebra;
    }
  }

}

/**
 * Returns the course code value from a view result array value.
 * @param  [type] $result [description]
 * @return [type]         [description]
 */
function stanford_courses_matrix_get_results_course_code($result) {
  return $result->field_field_s_course_code_1[0]['raw']['value'];
}

/**
 * Alter function for views_matrix plugin.
 *
 * @param array $column_renders
 *   The keyed array of headers to use as the x values.
 * @param object $view
 *   The view object that is being acted upon.
 */
function stanford_courses_matrix_views_matrix_columns_renders_alter(&$column_renders, $view) {

  // Only act on the views we want them to.
  if ($view->name !== "dance_courses") {
    return;
  }

  // Set the order of the seasons. Any other value gets dropped.
  $order = array("Autumn", "Winter", "Spring", "Summer");
  $new_renders = array();
  foreach ($order as $season) {
    // Key is important as it is used to match up items with this season.
    $key = array_search($season, $column_renders);

    // If no key drop and continue.
    if ($key === FALSE) {
      continue;
    }

    // Adding it to the array this way maintains the order we want.
    $new_renders[$key] = $season;
  }

  // Updates the passed by reference variable.
  $column_renders = $new_renders;
}

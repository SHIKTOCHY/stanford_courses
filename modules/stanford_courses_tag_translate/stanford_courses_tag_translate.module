<?php
/**
 * @file
 * File description
 *
 * Long description
 */

include_once 'stanford_courses_tag_translate.features.inc';

/**
 * Implements hook_help().
 */
function stanford_courses_tag_translate_help($path, $arg) {
  switch ($path) {
    // Main module help for the block module.
    case 'admin/help#course-tag-translate':
      return '<p>' . t('Ask John !email', array('!email' => l("jbickar@stanford.edu","mailto://jbickar@stanford.edu"))) . '</p>';
  }
}

/**
 * Implements hook_menu().
 */
function stanford_courses_tag_translate_menu() {

  // Landing page.
  $items['admin/config/stanford/courses/tag-translate'] = array(
    'title' => 'Stanford Courses Tag Translate',
    'page callback' => 'stanford_courses_tag_translate_settings',
    'page arguments' => array(),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
    'file' => "stanford_courses_tag_translate.pages.inc",
  );

  return $items;
}


/*
 * Implements hook_ctools_plugin_directory().
 */
function stanford_courses_tag_translate_ctools_plugin_directory($module, $plugin) {
  if ($module == 'feeds_tamper') {
    return 'plugins';
  }
}

/**
 * Gets all the translations out of the database keyed with the tag.
 *
 * @return array
 *   An array of translations keyed by the tag.
 */
function stanford_courses_tag_translate_get_translation_table() {
  $ttable = &drupal_static(__FUNCTION__);
  if ($ttable) {
    return $ttable;
  }
  $results = db_select("stanford_courses_tag", "sct")
              ->fields("sct", array("ctag", "chuman"))
              ->execute()
              ->fetchAllAssoc("ctag");

  ksort($results, SORT_NATURAL, SORT_FLAG_CASE);
  $ttable = $results;
  return $ttable;
}

/**
 * Alters the stanford_course_importer feed importer.
 *
 * If the feed importer is in code then alter it to add the human translated
 * field mapping and configuration. This function is also called by hook_install
 * if the feed importer settings are in the database.
 *
 * @param array $importers
 *   An array of default feed importers.
 */
function stanford_courses_tag_translate_feeds_importer_default_alter(&$importers) {

  // Only want the one.
  if (!isset($importers['stanford_course_importer'])) {
    return NULL;
  }

  $importer = &$importers['stanford_course_importer'];

  $config = $importer->config;

  // Get the xpath count for this.
  ksort($config['parser']['config']['sources'], SORT_NATURAL);
  $keys = array_keys($config['parser']['config']['sources']);
  $key = array_pop($keys);
  $xcurrent = str_replace("xpathparser:", "", $key);
  $xcount = (int) $xcurrent + 1;

  // // Set the parser source.
  $config['parser']['config']['sources']["xpathparser:" . $xcount] = "tags/tag";

  // // Set to return back raw XML.
  $config['parser']['config']['rawXML']["xpathparser:" . $xcount] = "xpathparser:" . $xcount;

  // // No debug.
  $config['parser']['config']["exp"]['debug']["xpathparser:" . $xcount] = 0;

  // // Processor.
  $config['processor']['config']['mappings'][$xcount] = array(
    'source' => "xpathparser:" . $xcount,
    'target' => "field_s_course_tag_human",
    'unique' => FALSE,
  );


  $importer->config = $config;
  $importers["stanford_course_importer"] = $importer;

}

/**
 * Add in the required tampers to make the translation work.
 *
 * Need to look up which mapping the human field is on as it could change. This
 * alter seems to work regardless of in code or in database settings.
 *
 * @param array $tampers
 *   An array of tamper items.
 */
function stanford_courses_tag_translate_feeds_tamper_default_alter(&$tampers) {

  $importer = feeds_importer_load("stanford_course_importer");

  if (!$importer) {
    return;
  }

  // Get the xpath count for this.
  $xcount = NULL;
  $options = $importer->processor->config["mappings"];
  $options = array_reverse($options);
  foreach ($options as $xkey => $opt) {
    if ($opt['target'] == "field_s_course_tag_human") {
      $xcount = (int) str_replace("xpathparser:", "", $opt['source']);
      break;
    }
  }

  // No altering if not found.
  if (!$xcount) {
    return;
  }

  $feeds_tamper = new stdClass();
  $feeds_tamper->disabled = FALSE; /* Edit this to true to make a default feeds_tamper disabled initially */
  $feeds_tamper->api_version = 2;
  $feeds_tamper->id = 'stanford_course_importer-xpathparser_' . $xcount . '-clean_up_additional_xml';
  $feeds_tamper->importer = 'stanford_course_importer';
  $feeds_tamper->source = 'xpathparser:' . $xcount;
  $feeds_tamper->plugin_id = 'find_replace_regex';
  $feeds_tamper->settings = array(
    'find' => '/<\\/?organization>|<\\/?tag>|<\\/?name>|\\s{2,}/',
    'replace' => '',
    'limit' => '',
    'real_limit' => -1,
  );
  $feeds_tamper->weight = 1;
  $feeds_tamper->description = 'Clean up additional XML';
  $tampers['stanford_course_importer-xpathparser_' . $xcount . '-clean_up_additional_xml'] = $feeds_tamper;

  $feeds_tamper = new stdClass();
  $feeds_tamper->disabled = FALSE; /* Edit this to true to make a default feeds_tamper disabled initially */
  $feeds_tamper->api_version = 2;
  $feeds_tamper->id = 'stanford_course_importer-xpathparser_' . $xcount . '-course_translate_tamper';
  $feeds_tamper->importer = 'stanford_course_importer';
  $feeds_tamper->source = 'xpathparser:' . $xcount;
  $feeds_tamper->plugin_id = 'stanford_courses_tag_translate_tamper';
  $feeds_tamper->settings = array();
  $feeds_tamper->weight = 2;
  $feeds_tamper->description = 'Translate into human readable values';
  $tampers['stanford_course_importer-xpathparser_' . $xcount . '-course_translate_tamper'] = $feeds_tamper;

  $feeds_tamper = new stdClass();
  $feeds_tamper->disabled = FALSE; /* Edit this to true to make a default feeds_tamper disabled initially */
  $feeds_tamper->api_version = 2;
  $feeds_tamper->id = 'stanford_course_importer-xpathparser_' . $xcount . '-replace_close_op_doub';
  $feeds_tamper->importer = 'stanford_course_importer';
  $feeds_tamper->source = 'xpathparser:' . $xcount;
  $feeds_tamper->plugin_id = 'find_replace_regex';
  $feeds_tamper->settings = array(
    'find' => '/<\\/organization>\\s{1,}<name>/',
    'replace' => '::',
    'limit' => '',
    'real_limit' => -1,
  );
  $feeds_tamper->weight = 0;
  $feeds_tamper->description = 'Replace closing/opening tags with double-colon';

  $tampers['stanford_course_importer-xpathparser_' . $xcount . '-replace_close_op_doub'] = $feeds_tamper;

}

<?php

include_once('stanford_courses.features.inc');

/**
 * Implements hook_enable().
 */
function stanford_courses_enable() {
  $modules = array();
  $modules[] = 'feeds';
  $modules[] = 'content';
  module_enable($modules);
  variable_set('node_options_stanford_course', array('status', 'revision'));
  variable_set('node_options_stanford_section', array('status', 'revision'));
  drupal_flush_all_caches();
}

/**
 * Implements hook_help().
 */
function stanford_courses_help($path, $arg) {
  switch ($path) {
    case 'admin/help#stanford_courses':
      $output = '<p>' . t('This module provides a turnkey solution for importing course information from !explorecourses. It includes a &quot;Stanford Course&quot; content type and a &quot;Stanford Course Section&quot; content type; two &quot;meta&quot; content types for importing (&quot;Stanford Course Importer&quot; and &quot;Stanford Course Section Importer&quot;); and Views of all courses and course sections. ', array('!explorecourses' => l('explorecourses.stanford.edu', 'http://explorecourses.stanford.edu'))) .'</p>';
      $output .= '<h2>' . t('Importing Courses') . '</h2>';
      $output .= '<p>' . t('To import from a feed, first construct the search for the courses that you want to import at !explorecourses.', array('!explorecourses' => l('explorecourses.stanford.edu', 'http://explorecourses.stanford.edu'))) .'</p>';
      $output .= '<p>' . t('Paste the URL of your search into the URL box (e.g., &quot;http://explorecourses.stanford.edu/search?view=catalog&filter-coursestatus-Active=on...&quot; etc.) at !import and click the <strong>Import</strong> button to import <em>course</em> information. (The module will &quot;automagically&quot; convert the search URL into an XML URL.)', array('!import' => l('node/add/stanford-course-importer', 'node/add/stanford-course-importer'))) .'</p>';
      $output .= '<p>' . t('A link to the course listing on ExploreCourses automatically will be created for each course node.') . '</p>';
      $output .= '<h2>' . t('Course Sections') . '</h2>';
      $output .= '<p>' . t('It is possible to import Course Section information as well. Note that there are some limitations to this approach, and users are advised to use the link to the ExploreCourses website that is provided on each course node.');
      $output .= t('It is likely that the Course Section importer will be removed from future versions of the Stanford Courses module.') . '</p>';
      $output .= '<p>' . t('Paste the <em>same</em> search URL into the URL box at !import and click the <strong>Import</strong> button to import <em>course section</em> information.', array('!import' => l('node/add/stanford-course-section-importer', 'node/add/stanford-course-section-importer'))) .'</p>';
      $output .= '<p>' . t('<strong>Courses</strong> and <strong>Course Sections</strong> can have !nodereference relationships. ', array('!nodereference' => l('CCK Nodereference', 'https://drupal.org/project/cck')));
      $output .= t('These nodereferences get created &quot;automagically&quot; on import, based on a common <strong>Course ID</strong> value.') .'</p>';
      $output .= '<p>' . t('<strong>Note:</strong> A current limitation is that only one nodereference between a <strong>Course</strong> node and a <strong>Course Section</strong> is created. ');
      $output .= t('Users wishing to create automatic many-to-one nodereference relationships are encouraged to use the !cnr module. ', array('!cnr' => l('Corresponding Node Reference', 'https://drupal.org/project/cnr')));
      $output .= '<p>' . t('After importing course and course section nodes, two table Views are created at !stanfordcourses and !stanfordcoursesections, respectively.', array('!stanfordcourses' => l('stanford-courses', 'stanford-courses'), '!stanfordcoursesections' => l('stanford-course-sections', 'stanford-course-sections'))) .'</p>';
      return $output;
  }
}

/**
 * Implements hook_form_alter().
 *
 * Add the creation of noderferences at the time of import.
 * Modify the search URL to retrieve the XML URL instead.
 */
function stanford_courses_form_alter(&$form, &$form_state, $form_id) {
  if (($form_id == 'stanford_course_importer_node_form') || ($form_id == 'stanford_course_section_importer_node_form') || $form_id == 'feeds_import_tab_form') {
    $form['#submit'][] = 'stanford_courses_create_nodereference_submit';
    //make our validation function run first
    if (is_array($form['#validate'])) {
      array_unshift($form['#validate'], 'stanford_courses_feed_url_validate');
    }
    else {
      $form['#validate'][] = 'stanford_courses_feed_url_validate';
    }
  }
  if ($form_id == 'stanford_course_node_form') {
    //make our validation function run first
    if (is_array($form['#validate'])) {
      array_unshift($form['#validate'], 'stanford_courses_ec_link_validate');
    }
    else {
      $form['#validate'][] = 'stanford_courses_ec_link_validate';
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add the creation of nodereferences at the time of import (on standalone form).
 */
function stanford_courses_form_feeds_import_form_alter(&$form, &$form_state) {
  if (($form['#importer_id'] == 'stanford_course_importer') || ($form['#importer_id'] == 'stanford_course_section_importer')) {
    $form['#submit'][] = 'stanford_courses_create_nodereference_submit';
  }
}

/**
 * Implements hook_menu().
 */
function stanford_courses_menu() {
  $items['admin/settings/stanford-courses'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('stanford_courses_settings_form'),
    'access arguments' => array('administer nodes'),
    'title' => 'Stanford Course Importer Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  return $items;
}

/**
 * Modify the search URL to retrieve the XML URL instead.
 */
function stanford_courses_feed_url_validate($form, &$form_state) {
  //Let's make things a little easier on the user
  $feed_url = $form_state['values']['feeds']['FeedsHTTPFetcher']['source'];
  $feed_url = preg_replace('/view\=catalog/', 'view=xml-20120105', $feed_url);
  $feed_url = preg_replace('/https/', 'http', $feed_url);
  form_set_value(array('#parents' => array('feeds', 'FeedsHTTPFetcher', 'source')), $feed_url, &$form_state);
}

/*
 * Modify the ExploreCourses link to pass the subject through drupal_urlencode().
 */
function stanford_courses_ec_link_validate($form, &$form_state) {
  $subject = $form_state['values']['field_stanford_course_subject'][0]['value'];
  $code = $form_state['values']['field_stanford_course_code'][0]['value'];
  $ec_link = 'http://explorecourses.stanford.edu/search?view=catalog&filter-coursestatus-Active=on&q=' . urlencode($subject) . '+' . urlencode($code);
  form_set_value(array('#parents' => array('field_stanford_course_ec_link', 0, 'url')), $ec_link, &$form_state);
}

/**
 * Settings form.
 */
function stanford_courses_settings_form() {
  $form = array();
  $description = '<p>' . t('Here you can create automatic node references between <strong>Stanford Course</strong> nodes and <strong>Stanford Course Section</strong> nodes. ');
  $description .= t('These node reference relationships are created based on a common <strong>Subject, Code, and Course ID</strong> value. ') . '</p>';
  $form['intro'] = array(
    '#value' => $description,
  );
  $form['submit'] = array(
    '#type' => 'submit', 
    '#value' => t('Update Node References'),
  );
  $form['#submit'][] = 'stanford_courses_create_nodereference_submit';
  return $form;
}

/**
 * Create nodereferences for Stanford Course and Stanford Course Section nodes.
 * Join on common Course ID fields.
 */
function stanford_courses_create_nodereference_submit(&$form, &$form_state) {
  //Course ID, section nodes
  $section_cid = 'field_stanford_section_scid_value';

  //Course ID, course nodes
  $course_cid = 'field_stanford_course_scid_value';

  //Section node, referenced course node nid (1-to-1 in this direction)
  $section_nid = 'field_stanford_section_course_nid';

  //nid of course node
  $course_nid = 'content_type_stanford_course.nid';

  //nid of course node in 1-to-many nodereference table; not used?
  $course_nid_rev = 'content_field_stanford_course_section.nid';

  //Create 1-to-1 nodereferences from section nodes to course nodes; simpler than the other direction because a section only can have one nodereference to a course
  //Update content_type_stanford_section.field_stanford_section_course_nid, left join content_type_stanford_course on course ID, set field_stanford_section_course_nid = content_type_stanford_course.nid
  //LEFT JOIN returns all rows from content_type_stanford_section, regardless of whether there's a corresponding course ID, or whether it's duplicated - which is what we want because we want to update *each* row
  //In English: where the course ID number is the same for a section node and a course node, set the nodereference field in the section node to the nid of the corresponding course node
  $result = db_query("UPDATE {content_type_stanford_section} LEFT JOIN {content_type_stanford_course} ON %s = %s SET %s = %s", $section_cid, $course_cid, $section_nid, $course_nid);

  //nid of course node in 1-to-many nodereference table; same as $course_nid_rev
  $course_nid_a = 'content_field_stanford_course_section.nid';

  //nid of section node in 1-to-many nodereference table (this is the field name in the table)
  $course_section_nid = 'field_stanford_course_section_nid';

  //nid of section node in its own DB table
  $section_nid_a = 'content_type_stanford_section.nid';

  //Joining three tables - good times!
  //Update content_field_stanford_course_section
  //First join: set up a relationship between content_field_stanford_course_section and content_type_stanford_course, with nid as common field
  //Second join: set up a relationship between content_type_stanford_course and content_type_stanford_section, with Course ID as common field
  //Update content_field_stanford_course_section, set field_stanford_course_section_nid = content_type_stanford_section.nid where content_field_stanford_course_section.nid = content_type_stanford_course.nid
  $result = db_query("UPDATE {content_field_stanford_course_section} LEFT JOIN {content_type_stanford_course} ON %s = %s LEFT JOIN {content_type_stanford_section} ON %s = %s SET %s = %s WHERE %s = %s", $course_nid_a, $course_nid, $course_cid, $section_cid, $course_section_nid, $section_nid_a, $course_nid_a, $course_nid);

  drupal_flush_all_caches();
  drupal_set_message(t('If applicable, nodereferences between Stanford Course nodes and Stanford Course Section nodes have been created and/or updated.'));
}

/**
 * Retrieve all nodereference fields.
 */
function stanford_courses_get_nodereference_fields() {
  $type = 'nodereference';
  $results = db_query('SELECT * FROM {content_node_field} WHERE type = \'%s\'', $type);
  $nodereference_fields = array();
  while ($row = db_fetch_array($results)) {
    $nodereference_fields[] = $row['field_name'];
  }
  return $nodereference_fields;
}

/*
 * Implements hook_ctools_plugin_directory().
 */
function stanford_courses_ctools_plugin_directory($module, $plugin) {
  if ($module == 'feeds_tamper') {
    return 'plugins';
  }
}

